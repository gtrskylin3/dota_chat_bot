import random
import os
import urllib.parse
import asyncio
import requests
import logging
import aiohttp
import re
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from dotenv import load_dotenv, find_dotenv
from functools import lru_cache
from dota_heroes import HEROES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv(find_dotenv())

bot = Bot(token=os.getenv('DOTA2BOT_TOKEN'))
dp = Dispatcher()

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–µ—Ä–æ–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
POPULAR_HEROES = ["Pudge", "Invoker", "Sniper", "Lina", "Shadow Fiend"]

DESIRED_CATEGORIES = [
    "–ü–æ—è–≤–ª–µ–Ω–∏–µ", "–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ", "–ê—Ç–∞–∫–∞", "–£–±–∏–π—Å—Ç–≤–æ", "–°–º–µ—Ä—Ç—å", "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞",
    "–î–æ–±–∏–≤–∞–Ω–∏–µ", "–í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ", "–í—Å—Ç—Ä–µ—á–∞ —Å —Å–æ—é–∑–Ω–∏–∫–æ–º", "–í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞–≥–æ–º", "–°–º–µ—Ö",
    "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "–ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è", "–ù–∞—á–∞–ª–æ –±–æ—è", "–ü–æ–±–µ–¥–∞", "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
]

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–ª–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤
SOUND_PATTERN = re.compile(r'^[–£–•–´–ê–ú–†–ö–§–ù–¢]{1,3}[!]$', re.IGNORECASE)

async def keep_alive():
    url = 'https://dota-chat-bot.onrender.com/'
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(url) as response:
                    logger.info(f"Ping: {response.status}")
            except Exception as e:
                logger.error(f"Ping error: {e}")
            await asyncio.sleep(1000)





@lru_cache(maxsize=100)
def get_cached_quotes(hero_name: str) -> tuple:
    try:
        hero_name_url = hero_name.replace(" ", "_")
        url = f"https://dota2.fandom.com/ru/wiki/{hero_name_url}/–†–µ–ø–ª–∏–∫–∏"
        response = requests.get(url)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        content = soup.select_one('div.mw-parser-output')
        if not content:
            return ("–†–µ–ø–ª–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–µ—Ä–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",)

        valid_quotes = []
        current_category = None

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        for element in content.find_all(['h2', 'h3', 'ul'], recursive=False):
            if element.name in ['h2', 'h3']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_span = element.find('span', class_='mw-headline')
                current_category = category_span.get_text(strip=True) if category_span else None
            elif element.name == 'ul' and current_category:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –∂–µ–ª–∞–µ–º—ã–µ
                if current_category in DESIRED_CATEGORIES:
                    quotes = element.find_all('li', recursive=False)
                    for quote in quotes:
                        # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã <span> (–∞—É–¥–∏–æ –∏ –¥—Ä—É–≥–∏–µ)
                        for span in quote.find_all('span'):
                            span.decompose()
                        text = quote.get_text(strip=True)

                        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                        if not text or len(text) < 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∞
                            continue
                        if SOUND_PATTERN.match(text):  # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω—ã—Ö –∑–≤—É–∫–æ–≤
                            continue

                        valid_quotes.append(text)

        return tuple(valid_quotes) if valid_quotes else ("–†–µ–ø–ª–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–µ—Ä–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",)
    except Exception as e:
        return (f"–û—à–∏–±–∫–∞: {str(e)}",)

async def get_random_quote(hero_name: str) -> str:
    quotes = get_cached_quotes(hero_name)
    return random.choice(quotes) if len(quotes) > 1 or quotes[0].startswith("–†–µ–ø–ª–∏–∫–∏") else quotes[0]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_hero_keyboard():
    keyboard = ReplyKeyboardBuilder()
    for hero in POPULAR_HEROES:
        keyboard.button(text=hero)
    keyboard.button(text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤")
    keyboard.button(text="–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞")
    keyboard.adjust(5)
    return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=True)

def get_control_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/changehero")],
                                              [KeyboardButton(text="/info")], 
                                              [KeyboardButton(text="/stop")]], 
                                              resize_keyboard=True)
    return keyboard

class HeroState(StatesGroup):
    waiting_for_hero = State()
    chatting_with_hero = State()

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –≥–µ—Ä–æ—è–º–∏ Dota 2! "
        "–í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /random –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Ä–µ–ø–ª–∏–∫–∏.",
        parse_mode="Markdown",
        reply_markup=get_hero_keyboard()
    )
    await state.set_state(HeroState.waiting_for_hero)

@dp.message(Command(commands=["random", "–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞"]))
async def random_quote(message: Message):
    hero_name = random.choice(HEROES)
    quote = await get_random_quote(hero_name)
    await message.answer(f"*{hero_name}*: {quote}", parse_mode="Markdown")

@dp.message(Command("changehero"))
async def change_hero(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è:",
        parse_mode="Markdown",
        reply_markup=get_hero_keyboard()
    )
    await state.set_state(HeroState.waiting_for_hero)

@dp.message(Command("info"))
async def hero_info(message: Message, state: FSMContext):
    user_data = await state.get_data()
    hero_name = user_data.get('hero')
    if not hero_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /changehero!")
        return
    
    hero_name_url = urllib.parse.quote(hero_name.replace(" ", "_"))
    url = f"https://dota2.fandom.com/ru/wiki/{hero_name_url}"
    await message.answer(
        f"üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ *{hero_name}*: [–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ—Ä–æ—è]({url})",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

@dp.message(Command("stop"))
async def stop_chat(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ß–∞—Ç —Å –≥–µ—Ä–æ–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start!",
        parse_mode="Markdown",
        reply_markup=None
    )

@dp.message(HeroState.waiting_for_hero, F.text == "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤")
async def show_all_heroes(message: Message, state: FSMContext):
    heroes_list = "\n".join(HEROES)
    await message.answer(
        f"üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ Dota 2:\n{heroes_list}\n\n–í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –∏–º—è:",
        parse_mode="Markdown",
        reply_markup=get_hero_keyboard()
    )

@dp.message(HeroState.waiting_for_hero)
async def process_hero_name(message: Message, state: FSMContext):
    hero_name = message.text.strip().title()
    if hero_name not in HEROES:
        await message.answer(
            "‚ùå –¢–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è –Ω–µ—Ç –≤ Dota 2. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞!",
            parse_mode="Markdown",
            reply_markup=get_hero_keyboard()
        )
        return

    await state.update_data(hero=hero_name)
    await state.set_state(HeroState.chatting_with_hero)
    await message.answer(
        f"üéÆ –¢—ã –≤—ã–±—Ä–∞–ª *{hero_name}*! –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ {hero_name} –æ—Ç–≤–µ—Ç–∏—Ç.\n"
        f"–ö–æ–º–∞–Ω–¥—ã: /changehero, /info, /stop",
        parse_mode="Markdown",
        reply_markup=get_control_keyboard()
    )

@dp.message(HeroState.chatting_with_hero, F.text)
async def send_hero_quote(message: Message, state: FSMContext):
    user_data = await state.get_data()
    hero_name = user_data.get('hero')
    
    if not hero_name:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è —Å –ø–æ–º–æ—â—å—é /start –∏–ª–∏ /changehero!",
            parse_mode="Markdown",
            reply_markup=get_hero_keyboard()
        )
        await state.set_state(HeroState.waiting_for_hero)
        return
    
    quote = await get_random_quote(hero_name)
    await message.answer(
        f"*{hero_name}*: {quote}",
        parse_mode="Markdown",
        reply_markup=get_control_keyboard()
    )

async def main():
    asyncio.create_task(keep_alive())
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.delete_my_commands()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
